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
192.168.0.146

 public RoomInterface(String IP_Server, int port, String name, boolean isHost) {
        this.name = name;
        this.port = port;
        this.isHost = isHost;
        this.IP_Server = IP_Server;

        System.out.println("Roominterface 37: " + this.name + " " + this.port + " " + this.isHost);

        SwingUtilities.invokeLater(() -> {
            setSize(800, 400);
            setTitle("Video Room");
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

            if (isHost) {
                System.out.println("Room interface 45: host");
                try {

                    ServerSocket ss = new ServerSocket(this.port);
                    new Thread(() -> {
                        try {
                            while (true) {
                                Socket sk = ss.accept();
                                System.out.println("Room interface 52: create server socket host done");

                                // Handle client connection
                                DataInputStream din = new DataInputStream(sk.getInputStream());
                                System.out.println("Room interface 54 || Client video room join: " + din.readUTF());
                                haveClients = true;

                                // Continue listening for more clients
                            }
                        } catch (SocketException se) {
                            // Handle client disconnection
                            System.out.println("Client disconnected");
                            // Set haveClients to false when there are no connected clients
                            while (true) {
                                Socket sk;
                                try {
                                    sk = ss.accept();
                                    // Handle client connection
                                    DataInputStream din1 = new DataInputStream(sk.getInputStream());
                                    System.out.println("Room interface 54 || Client video room join: " + din1.readUTF());
                                    haveClients = false;

                                } catch (IOException ex) {
                                    Logger.getLogger(RoomInterface.class.getName()).log(Level.SEVERE, null, ex);
                                }

                                // Continue listening for more clients
                            }
                        } catch (IOException e) {
                            // Handle other exceptions, e.g., if the server socket is closed
                            e.printStackTrace();
                        } finally {
                            // Optionally, you can close the server socket or perform cleanup here
                        }
                    }).start();

                    JPanel containerPanelLeftAndRight = new JPanel(new GridLayout(1, 2));

                    JPanel panelLeft = createPanelLeft(this.isHost);
                    JPanel panelRight = createPanelRight(this.port, this.isHost);

                    containerPanelLeftAndRight.removeAll();
                    containerPanelLeftAndRight.add(panelLeft);
                    containerPanelLeftAndRight.add(panelRight);

                    getContentPane().add(containerPanelLeftAndRight);
                    revalidate();
                    repaint();

                    setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else {
                System.out.println("Room interface 94: client");
                try {
                    s = new Socket(IP_Server, this.port);

                    // Modify your loop to receive and display frames
                    JPanel containerPanelLeftAndRight = new JPanel(new GridLayout(1, 2));

                    JPanel panelLeft = createPanelLeft(this.isHost);
                    JPanel panelRight = createPanelRight(this.port, this.isHost);

                    containerPanelLeftAndRight.removeAll();
                    containerPanelLeftAndRight.add(panelLeft);
                    containerPanelLeftAndRight.add(panelRight);

                    getContentPane().add(containerPanelLeftAndRight);
                    revalidate();
                    repaint();

                    setVisible(true);

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }
